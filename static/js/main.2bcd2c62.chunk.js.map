{"version":3,"sources":["PostIt/PostIt.js","AddAPostIt/AddAPostIt.js","RemainingPostItCount/RemainingPostItCount.js","OutstandingPostItCount/OutstandingPostItCount.js","App.js","serviceWorker.js","index.js"],"names":["PostIt","props","className","completed","text","type","onClick","completeTask","id","deleteTask","AddAPostIt","useState","setText","onChange","event","target","value","addTask","RemainingPostItCount","count","OutstandingPostItCount","App","uuidv4","tasks","setTasks","activeTasks","filter","task","completedTasks","updatedTasks","map","newTask","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bcd2c62.chunk.js","sourcesContent":["import React from 'react';\nimport './PostIt.css'\n\nfunction PostIt(props) {\n\n    function handleDeleteClick(){\n        props.deleteTask(props.id)\n       }\n\n       function handleCompleteClick(){\n        props.completeTask(props.id)\n       }\n  return (\n    \n    <div className = \"col-12 col-md-4\">\n               <p className = {`post-it ${props.completed ? `post-it__completed` : `post-it__remaining`}`}>{props.text}</p>\n                \n               \n                    {!props.completed &&<button type=\"button\" \n                                                className=\"btn btn-success done-button\"\n                                                onClick={handleCompleteClick}>Done</button>}\n                    <button type=\"button\"\n                            className=\"btn btn-danger delete-button\"\n                            onClick={handleDeleteClick}>Delete</button>\n    </div>    \n    \n  );\n}\n\nexport default PostIt;","import React, { useState } from 'react';\nimport './AddAPostIt.css'\n\nfunction AddAPostIt(props) {\n\n\n    const [text, setText] = useState(\"\");\n\n    function handleTextChange(event){\n        setText(event.target.value);\n    }\n\n    function handleAddTaskClick(){\n        props.addTask(text);\n    }\n\n\n  return (\n    <div>\n        <form className=\"form-inline task-input\">\n            \n           \n            <input \n            onChange={handleTextChange}\n            value={text}\n            type=\"text\" \n            className=\"form-control task-input__input-field add-a-task-input-form\" \n            id=\"taskInput\"/>\n            \n            <button \n            onClick={handleAddTaskClick}\n            type=\"button\" \n            className=\"btn btn-primary add-a-task-button\">+</button>\n            \n        </form> \n\n     \n    </div>\n    \n  );\n}\n\nexport default AddAPostIt;","import React from 'react';\nimport './RemainingPostItCount.css'\n\nfunction RemainingPostItCount(props) {\n  return (\n    \n    <div className = \"remaining-post-it-count\">\n               <h3>You have {props.count} remaining post it notes</h3>            \n    </div>    \n    \n  );\n}\n\nexport default RemainingPostItCount;","import React from 'react';\nimport './OutstandingPostItCount.css'\n\nfunction OutstandingPostItCount(props) {\n  return (\n    \n    <div className = \"outstanding-post-it-count\">\n               <h3>You have {props.count} completed post it notes</h3>            \n    </div>    \n    \n  );\n}\n\nexport default OutstandingPostItCount;","import React, { useState } from 'react';\nimport './App.css';\nimport PostIt from \"./PostIt/PostIt\"\nimport AddAPostIt from './AddAPostIt/AddAPostIt';\nimport RemainingPostItCount from './RemainingPostItCount/RemainingPostItCount';\nimport OutstandingPostItCount from './OutstandingPostItCount/OutstandingPostItCount';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n    { text: \"Clean the kitchen surfaces\", completed: true, id: uuidv4() },\n    { text: \"Sort out Dads' Fathers' Day present\", completed: false, id: uuidv4() },\n    { text: \"Email manager re: student election outcome\", completed: false, id: uuidv4() },\n    { text: \"Complete ILM qualification\", completed: false, id: uuidv4() },\n    { text: \"Mow the back garden\", completed: true, id: uuidv4() },\n    { text: \"Batch cook carrot and lentil soup\", completed: false, id: uuidv4() },\n    { text: \"Visit Al & Jo (from a safe distance!)\", completed: false, id: uuidv4() }\n  ]);\n\n  const activeTasks = tasks.filter(task => !task.completed);\n  const completedTasks = tasks.filter(task => task.completed);\n\n  function deleteTask(id) {\n\n    const updatedTasks = tasks.filter(task => task.id !== id)\n    setTasks(updatedTasks);\n  }\n\n  function completeTask(id) {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        task.completed = true;\n      }\n      return task\n    })\n    setTasks(updatedTasks);\n  }\n\n\n  function addTask(text) { \n\n  const newTask = {\n    text: text,\n    completed: false,\n    id: uuidv4()\n  }\n\n  const updatedTasks = [...tasks, newTask]\n  setTasks(updatedTasks);\n}\n\n  return (\n\n    <div className=\"App\">\n      <h1>Get Stuff Done.</h1>\n      <div className=\"form\">\n        <AddAPostIt addTask={addTask} />\n      </div>\n      <div className=\"remaining-post-it-count\">\n        <RemainingPostItCount count={activeTasks.length} />\n      </div>\n\n\n      <div className=\"container\">\n        <div className=\"row\">\n          {activeTasks.map(task => <PostIt\n            completeTask={completeTask}\n            deleteTask={deleteTask}\n            id={task.id}\n            key={task.id}\n            text={task.text}\n            completed={task.completed} />)}\n\n\n\n\n\n\n        </div>\n      </div>\n      <div className=\"tasks outstanding-post-it-count\">\n        <OutstandingPostItCount count={completedTasks.length} />\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          {completedTasks.map(task => <PostIt\n            completeTask={completeTask}\n            deleteTask={deleteTask}\n            id={task.id}\n            key={task.id}\n            text={task.text}\n            completed={task.completed} />)}\n\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}